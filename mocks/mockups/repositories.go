// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories.go

// Package mockups is a generated GoMock package.
package mockups

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mercadolibre/hexagonal-architecture-example/internal/core/domain"
)

// MockCardRepository is a mock of CardRepository interface
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockCardRepository) Save(card domain.Card) error {
	ret := m.ctrl.Call(m, "Save", card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCardRepositoryMockRecorder) Save(card interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCardRepository)(nil).Save), card)
}

// Get mocks base method
func (m *MockCardRepository) Get(id string) (domain.Card, error) {
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCardRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCardRepository)(nil).Get), id)
}

// MockTransactionRepository is a mock of TransactionRepository interface
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockTransactionRepository) Save(transaction domain.Transaction) error {
	ret := m.ctrl.Call(m, "Save", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockTransactionRepositoryMockRecorder) Save(transaction interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionRepository)(nil).Save), transaction)
}

// Update mocks base method
func (m *MockTransactionRepository) Update(transaction domain.Transaction) error {
	ret := m.ctrl.Call(m, "Update", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTransactionRepositoryMockRecorder) Update(transaction interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionRepository)(nil).Update), transaction)
}

// Get mocks base method
func (m *MockTransactionRepository) Get(id string) (domain.Transaction, error) {
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTransactionRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransactionRepository)(nil).Get), id)
}

// FindAllExpired mocks base method
func (m *MockTransactionRepository) FindAllExpired() (domain.TransactionResponse, error) {
	ret := m.ctrl.Call(m, "FindAllExpired")
	ret0, _ := ret[0].(domain.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllExpired indicates an expected call of FindAllExpired
func (mr *MockTransactionRepositoryMockRecorder) FindAllExpired() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllExpired", reflect.TypeOf((*MockTransactionRepository)(nil).FindAllExpired))
}
