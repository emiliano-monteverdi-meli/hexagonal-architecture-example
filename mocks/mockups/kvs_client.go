// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/emonteverdi/go/pkg/mod/github.com/mercadolibre/go-meli-toolkit@v0.0.0-20210513150633-57a95729102b/gokvsclient/gokvsclient.go

// Package mockups is a generated GoMock package.
package mockups

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gokvsclient "github.com/mercadolibre/go-meli-toolkit/gokvsclient"
)

// MockKvsClient is a mock of Client interface
type MockKvsClient struct {
	ctrl     *gomock.Controller
	recorder *MockKvsClientMockRecorder
}

// MockKvsClientMockRecorder is the mock recorder for MockKvsClient
type MockKvsClientMockRecorder struct {
	mock *MockKvsClient
}

// NewMockKvsClient creates a new mock instance
func NewMockKvsClient(ctrl *gomock.Controller) *MockKvsClient {
	mock := &MockKvsClient{ctrl: ctrl}
	mock.recorder = &MockKvsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKvsClient) EXPECT() *MockKvsClientMockRecorder {
	return m.recorder
}

// DeleteContainer mocks base method
func (m *MockKvsClient) DeleteContainer() error {
	ret := m.ctrl.Call(m, "DeleteContainer")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer
func (mr *MockKvsClientMockRecorder) DeleteContainer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockKvsClient)(nil).DeleteContainer))
}

// Get mocks base method
func (m *MockKvsClient) Get(key string) (gokvsclient.Item, error) {
	ret := m.ctrl.Call(m, "GetBatch", key)
	ret0, _ := ret[0].(gokvsclient.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKvsClientMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockKvsClient)(nil).Get), key)
}

// Save mocks base method
func (m *MockKvsClient) Save(item gokvsclient.Item) error {
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockKvsClientMockRecorder) Save(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKvsClient)(nil).Save), item)
}

// Update mocks base method
func (m *MockKvsClient) Update(item gokvsclient.Item) error {
	ret := m.ctrl.Call(m, "Update", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockKvsClientMockRecorder) Update(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKvsClient)(nil).Update), item)
}

// Delete mocks base method
func (m *MockKvsClient) Delete(key string) error {
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKvsClientMockRecorder) Delete(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKvsClient)(nil).Delete), key)
}

// BatchGet mocks base method
func (m *MockKvsClient) BatchGet(keys []string) ([]gokvsclient.Item, error) {
	ret := m.ctrl.Call(m, "BatchGet", keys)
	ret0, _ := ret[0].([]gokvsclient.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet
func (mr *MockKvsClientMockRecorder) BatchGet(keys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockKvsClient)(nil).BatchGet), keys)
}

// BatchSave mocks base method
func (m *MockKvsClient) BatchSave(items []gokvsclient.Item) error {
	ret := m.ctrl.Call(m, "BatchSave", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSave indicates an expected call of BatchSave
func (mr *MockKvsClientMockRecorder) BatchSave(items interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSave", reflect.TypeOf((*MockKvsClient)(nil).BatchSave), items)
}

// BatchUpdate mocks base method
func (m *MockKvsClient) BatchUpdate(items []gokvsclient.Item) error {
	ret := m.ctrl.Call(m, "BatchUpdate", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate
func (mr *MockKvsClientMockRecorder) BatchUpdate(items interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockKvsClient)(nil).BatchUpdate), items)
}

// BatchDelete mocks base method
func (m *MockKvsClient) BatchDelete(keys []string) error {
	ret := m.ctrl.Call(m, "BatchDelete", keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete
func (mr *MockKvsClientMockRecorder) BatchDelete(keys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockKvsClient)(nil).BatchDelete), keys)
}

// BulkGet mocks base method
func (m *MockKvsClient) BulkGet(keys []string) ([]gokvsclient.BulkItem, error) {
	ret := m.ctrl.Call(m, "BulkGet", keys)
	ret0, _ := ret[0].([]gokvsclient.BulkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGet indicates an expected call of BulkGet
func (mr *MockKvsClientMockRecorder) BulkGet(keys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGet", reflect.TypeOf((*MockKvsClient)(nil).BulkGet), keys)
}

// BulkSave mocks base method
func (m *MockKvsClient) BulkSave(items []gokvsclient.Item) ([]gokvsclient.BulkItem, error) {
	ret := m.ctrl.Call(m, "BulkSave", items)
	ret0, _ := ret[0].([]gokvsclient.BulkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkSave indicates an expected call of BulkSave
func (mr *MockKvsClientMockRecorder) BulkSave(items interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSave", reflect.TypeOf((*MockKvsClient)(nil).BulkSave), items)
}

// BulkUpdate mocks base method
func (m *MockKvsClient) BulkUpdate(items []gokvsclient.Item) ([]gokvsclient.BulkItem, error) {
	ret := m.ctrl.Call(m, "BulkUpdate", items)
	ret0, _ := ret[0].([]gokvsclient.BulkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpdate indicates an expected call of BulkUpdate
func (mr *MockKvsClientMockRecorder) BulkUpdate(items interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockKvsClient)(nil).BulkUpdate), items)
}

// BulkDelete mocks base method
func (m *MockKvsClient) BulkDelete(keys []string) ([]gokvsclient.BulkItem, error) {
	ret := m.ctrl.Call(m, "BulkDelete", keys)
	ret0, _ := ret[0].([]gokvsclient.BulkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkDelete indicates an expected call of BulkDelete
func (mr *MockKvsClientMockRecorder) BulkDelete(keys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkDelete", reflect.TypeOf((*MockKvsClient)(nil).BulkDelete), keys)
}

// GetCounter mocks base method
func (m *MockKvsClient) GetCounter(key string) (*int64, error) {
	ret := m.ctrl.Call(m, "GetCounter", key)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter
func (mr *MockKvsClientMockRecorder) GetCounter(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockKvsClient)(nil).GetCounter), key)
}

// IncrementCounter mocks base method
func (m *MockKvsClient) IncrementCounter(key string, value *int64) error {
	ret := m.ctrl.Call(m, "IncrementCounter", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCounter indicates an expected call of IncrementCounter
func (mr *MockKvsClientMockRecorder) IncrementCounter(key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockKvsClient)(nil).IncrementCounter), key, value)
}

// DecrementCounter mocks base method
func (m *MockKvsClient) DecrementCounter(key string, value *int64) error {
	ret := m.ctrl.Call(m, "DecrementCounter", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementCounter indicates an expected call of DecrementCounter
func (mr *MockKvsClientMockRecorder) DecrementCounter(key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementCounter", reflect.TypeOf((*MockKvsClient)(nil).DecrementCounter), key, value)
}

// ResetCounter mocks base method
func (m *MockKvsClient) ResetCounter(key string) error {
	ret := m.ctrl.Call(m, "ResetCounter", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCounter indicates an expected call of ResetCounter
func (mr *MockKvsClientMockRecorder) ResetCounter(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCounter", reflect.TypeOf((*MockKvsClient)(nil).ResetCounter), key)
}
